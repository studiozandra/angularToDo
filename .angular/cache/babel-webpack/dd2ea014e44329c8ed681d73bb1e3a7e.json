{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zk\\\\Documents\\\\codingstuff\\\\to-do\\\\angularToDo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\zk\\\\Documents\\\\codingstuff\\\\to-do\\\\angularToDo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; // headers for sending data in content type of JSON\n\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport var TodoService = /*#__PURE__*/(function () {\n  var TodoService = /*#__PURE__*/function () {\n    function TodoService(http) {\n      _classCallCheck(this, TodoService);\n\n      this.http = http;\n      this.todosUrl = 'https://jsonplaceholder.typicode.com/todos';\n      this.todosLimit = '?_limit=5'; // tthis added to the url limits the ger request to 5 responses.\n    } // we can just say this.http.blahblah\n    // Get Todos -- this service feeds the tasks with a get request to the JSON Placeholder URL\n\n\n    _createClass(TodoService, [{\n      key: \"getTodos\",\n      value: function getTodos() {\n        return this.http.get(\"\".concat(this.todosUrl).concat(this.todosLimit)); // since we made the URL a property we access it using 'this'. backtick and template literal syntax to add the limit of 5.\n      } // Delete Todo\n\n    }, {\n      key: \"deleteTodo\",\n      value: function deleteTodo(todo) {\n        var url = \"\".concat(this.todosUrl, \"/\").concat(todo.id);\n        return this.http.delete(url, httpOptions);\n      } // Toggle Completed (should be a put request but we can't actually update anything on the server)\n\n    }, {\n      key: \"toggleCompleted\",\n      value: function toggleCompleted(todo) {\n        var url = \"\".concat(this.todosUrl, \"/\").concat(todo.id);\n        return this.http.put(url, todo, httpOptions);\n      } //Add Todo - post request\n\n    }, {\n      key: \"addTodo\",\n      value: function addTodo(todo) {\n        return this.http.post(this.todosUrl, todo, httpOptions);\n      }\n    }]);\n\n    return TodoService;\n  }();\n\n  TodoService.ɵfac = function TodoService_Factory(t) {\n    return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoService,\n    factory: TodoService.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoService;\n})();","map":null,"metadata":{},"sourceType":"module"}